name: Release CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
      PACKAGE_NAME: ${{ steps.pkg.outputs.package_name }}
      VERSION: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Get name from package.json
        id: pkg
        run: |
          echo "::set-output name=package_name::$(node -p "require('./package.json').name")"
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_version.outputs.version }}'
          release_name: '${{ steps.pkg.outputs.package_name }} ${{ steps.get_version.outputs.version }}'
          body: 'See the assets to download this version and install.'
          draft: true
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        #        platform: [macos-latest, ubuntu-latest, windows-latest]
        platform: [macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # Rust cache
      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: Echo node|npm|pnpm version
        run: |
          echo node -v
          echo npm -v
          echo pnpm -v
        shell: bash

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # Change this to npm, yarn or pnpm.

      - name: Install app dependencies and build it
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          #          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          tagName: '${{ needs.create-release.outputs.VERSION }}'
          releaseName: '${{ needs.create-release.outputs.PACKAGE_NAME }} ${{ needs.create-release.outputs.VERSION }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false

  # 生成静态资源并将其推送到 github pages
  updater:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: Echo node|npm|pnpm version
        run: |
          echo node -v
          echo npm -v
          echo pnpm -v
        shell: bash

      - name: Install frontend dependencies
        run: pnpm install # Change this to npm, yarn or pnpm.

      - name: Run updater
        uses: actions/checkout@v2
      - run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          force_orphan: true